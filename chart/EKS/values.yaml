namespace: kong

env:
  database: "off"
  nginx_worker_processes: "1"
  proxy_access_log: /dev/stdout
  admin_access_log: /dev/stdout
  admin_gui_access_log: /dev/stdout
  portal_api_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  admin_error_log: /dev/stderr
  admin_gui_error_log: /dev/stderr
  portal_api_error_log: /dev/stderr
  prefix: /kong_prefix/

image:
  repository: kong
  tag: "2.0"
  pullPolicy: IfNotPresent
  
admin:
  enabled: false
  annotations: {}
  useTLS: true
  servicePort: 8444
  containerPort: 8444
  type: NodePort
  ingress:
    enabled: false
    hostname:
    annotations: {}
    path: /

proxy:
  annotations: {}
  http:
    enabled: true
    servicePort: 80
    containerPort: 8000
    
  tls:
    enabled: true
    servicePort: 443
    containerPort: 8443
    
  type: LoadBalancer

  ingress:
    enabled: false
    hosts: []
    annotations: {}
    path: /

  externalIPs: []

plugins: {}
  
secretVolumes: []

runMigrations: true

dblessConfig:
  configMap: ""
  config:
    _format_version: "1.1"
    services:
     
ingressController:
  enabled: false
  image:
    repository: kong-docker-kubernetes-ingress-controller.bintray.io/kong-ingress-controller
    tag: 0.7.0

  env: {}

  admissionWebhook:
    enabled: false
    failurePolicy: Fail
    port: 8080

  ingressClass: kong

  rbac:
    create: false
  serviceAccount:
    create: false
    name:

  installCRDs: false

  # general properties
  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  resources: {}


postgresql:
  enabled: true
  # postgresqlUsername: kong
  # postgresqlDatabase: kong
   

# -----------------------------------------------------------------------------
# Miscellaneous parameters
# -----------------------------------------------------------------------------

waitImage:
  repository: busybox
  tag: latest
  pullPolicy: IfNotPresent

# update strategy
updateStrategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: "100%"
  #   maxUnavailable: "0%"

resources: 
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

readinessProbe:
  httpGet:
    path: "/status"
    port: metrics
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

livenessProbe:
  httpGet:
    path: "/status"
    port: metrics
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3


tolerations: []

nodeSelector: {}


podAnnotations: {}


replicaCount: 1


podDisruptionBudget:
  enabled: true
  maxUnavailable: "50%"

podSecurityPolicy:
  enabled: false

hpa:
  enabled: true

securityContext:
  runAsUser: 1000


serviceMonitor:
  enabled: false
  
enterprise:
  enabled: false

  license_secret: you-must-create-a-kong-license-secret
  
  vitals:
    enabled: true
  portal:
    enabled: false
    
    portal_auth: basic-auth
    session_conf_secret: you-must-create-a-portal-session-conf-secret
  rbac:
    enabled: false
    admin_gui_auth: basic-auth
    session_conf_secret: you-must-create-an-rbac-session-conf-secret
    admin_gui_auth_conf_secret: you-must-create-an-admin-gui-auth-conf-secre
  smtp:
    enabled: false
    portal_emails_from: none@example.com
    portal_emails_reply_to: none@example.com
    admin_emails_from: none@example.com
    admin_emails_reply_to: none@example.com
    smtp_admin_emails: none@example.com
    smtp_host: smtp.example.com
    smtp_port: 587
    smtp_starttls: true
    auth:
      smtp_username: ''  # e.g. postmaster@example.com
      smtp_password_secret: you-must-create-an-smtp-password

manager:
  annotations: {}
  http:
    enabled: true
    servicePort: 8002
    containerPort: 8002
    

  tls:
    enabled: true
    servicePort: 8445
    containerPort: 8445

  type: NodePort

  ingress:
    enabled: false
    hostname:
    annotations: {}
    path: /

  externalIPs: []

portal:
  annotations: {}
  http:
    enabled: true
    servicePort: 8003
    containerPort: 8003
    
  tls:
    enabled: true
    servicePort: 8446
    containerPort: 8446
    

  type: NodePort

  ingress:
    enabled: false
    hostname:
    annotations: {}
    path: /

  externalIPs: []

portalapi:
  annotations: {}
  http:
    enabled: true
    servicePort: 8004
    containerPort: 8004
    
  tls:
    enabled: true
    servicePort: 8447
    containerPort: 8447
    
  type: NodePort

  ingress:
    enabled: false
    hostname:
    annotations: {}
    path: /

  externalIPs: []
